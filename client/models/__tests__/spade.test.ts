import { describe, test } from "vitest";

import { Spade } from "@/client/models/spade";

test("Invalid rank should throw an error.", ({ expect }) => {
  expect(() => Spade.create("InvalidRank")).toThrow(
    "Invalid rank: InvalidRank. Valid ranks: A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K",
  );
});

test.for(["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"])(
  "Create card with rank %s.",
  (rank, { expect }) => {
    const spade = Spade.create(rank);

    expect(spade.value).toBe(`Spade ${rank}`);
  },
);

describe.for<[string, [string, number][]]>([
  [
    "A",
    [
      ["A", 0],
      ["2", -1],
      ["3", -1],
      ["4", -1],
      ["5", -1],
      ["6", -1],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "2",
    [
      ["A", 1],
      ["2", 0],
      ["3", -1],
      ["4", -1],
      ["5", -1],
      ["6", -1],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "3",
    [
      ["A", 1],
      ["2", 1],
      ["3", 0],
      ["4", -1],
      ["5", -1],
      ["6", -1],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "4",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 0],
      ["5", -1],
      ["6", -1],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "5",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 0],
      ["6", -1],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "6",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 0],
      ["7", -1],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "7",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 0],
      ["8", -1],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "8",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 0],
      ["9", -1],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "9",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 1],
      ["9", 0],
      ["10", -1],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "10",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 1],
      ["9", 1],
      ["10", 0],
      ["J", -1],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "J",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 1],
      ["9", 1],
      ["10", 1],
      ["J", 0],
      ["Q", -1],
      ["K", -1],
    ],
  ],
  [
    "Q",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 1],
      ["9", 1],
      ["10", 1],
      ["J", 1],
      ["Q", 0],
      ["K", -1],
    ],
  ],
  [
    "K",
    [
      ["A", 1],
      ["2", 1],
      ["3", 1],
      ["4", 1],
      ["5", 1],
      ["6", 1],
      ["7", 1],
      ["8", 1],
      ["9", 1],
      ["10", 1],
      ["J", 1],
      ["Q", 1],
      ["K", 0],
    ],
  ],
])("Compare card %s", ([rank, others]) => {
  const testee = Spade.create(rank);

  test.for(others)("With %s", ([otherRank, expected], { expect }) => {
    const otherCard = Spade.create(otherRank);

    const actual = testee.compareTo(otherCard);

    expect(actual).toBe(expected);
  });
});
